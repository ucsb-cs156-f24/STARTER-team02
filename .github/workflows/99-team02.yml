name: 99 - Create Issues for team02

env:
  GH_TOKEN: ${{ github.token }}
  ASN_LINK: https://ucsb-cs156.github.io/f24/lab/team02
  FRONTEND_URL: "{ \"UCSBDiningCommonsMenuItem\": \"diningcommonsmenuitem\", \"UCSBOrganization\": \"ucsborganization\", \"RecommendationRequest\": \"recommendationrequest\", \"MenuItemReview\": \"menuitemreview\", \"HelpRequest\": \"helprequest\", \"Articles\": \"articles\" }"
  FIXTURES: "{ \"UCSBDiningCommonsMenuItem\": \"ucsbDiningCommonsMenuItem\", \"UCSBOrganization\": \"ucsbOrganization\", \"RecommendationRequest\": \"recommendationRequest\", \"MenuItemReview\": \"menuItemReview\", \"HelpRequest\": \"helpRequest\", \"Articles\": \"articles\" }"
  LABEL_COLOR: "{ \"UCSBDiningCommonsMenuItem\": \"ff0000\", \"UCSBOrganization\": \"00ff00\", \"RecommendationRequest\": \"0000ff\", \"MenuItemReview\": \"ff00ff\", \"HelpRequest\": \"ffff00\", \"Articles\": \"00ffff\" }"
  REPO_FILE: https://github.com/${{github.repository}}/blob/main
on:
  workflow_dispatch:
jobs:
  createOneOffIssues:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Delete label setup
        continue-on-error: true
        run: |
            gh api \
                  --method DELETE \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  /repos/${{github.repository}}/labels/setup 
      - name: Add Label setup
        continue-on-error: true
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{github.repository}}/labels \
            -f name='setup' \
            -f description='One time tasks to divide among all team members' \
            -f color='dddddd' 
            
      - name: Add table to README.md
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Add table to README.md
          labels: "setup"
          body: |
            # Acceptance Criteria:
            - [ ] The README.md has a table at the top like the one shown below
                  indicating which team member is initially taking on
                  which database table, and which is unassigned.
                  
                  ```
                  | Table                       | Team Member  | Github Id     |
                  |-----------------------------|--------------|---------------|
                  | `UCSBDiningCommonsMenuItem` | Alice        | alice33       |
                  | `UCSBOrganization`          | (unassigned) |               |
                  | `RecommendationRequest`     | Bob          | robertg       |
                  | `MenuItemReview`            | Charlie      | gauchocharlie |
                  | `HelpRequest`               | Danielle     | danielle      |
                  | `Articles`                  | Eddie        | eddydp        |
                  ```

      - name: Set up GitHub Pages
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Set up Github Pages
          labels: "setup"
          body: |
            # Acceptance Criteria:
            - [ ] Github Pages is active, using the `gh-pages` branch and the root directory
            - [ ] The main page of the repo has a link to the Github Pages site in the right side bar
            - [ ] The links on the Github Pages site work properly.

            # Details

            See the file  [`docs/github-pages.md`](/ucsb-cs156-f24/STARTER-team02/blob/main/docs/github-pages.md) in the repo for details
      
      - name: Set up Team prod deployment
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Set up Team prod deployment
          labels: "setup"
          body: |
            # Acceptance Criteria:
            - [ ] An app named `team02` is created on this team's dokku server.
            - [ ] An database is configured for that app (see: <https://ucsb-cs156.github.io/topics/dokku/postgres_database.html>)
            - [ ] HTTPS is configured for that app (see: <https://ucsb-cs156.github.io/topics/dokku/enabling_https.html>)
            - [ ] The ADMIN_EMAILS are configured for that app.
                  * You should find the ones you need in a pinned post on your team's Slack channel.
                  * Instructions for configuring the variable are here: <https://ucsb-cs156.github.io/topics/dokku/environment_variables.html>
            - [ ] Google OAuth is configured for that app.
                  * Instructions for configuring OAuth credentials are here: <https://ucsb-cs156.github.io/topics/oauth/oauth_google_setup.html>
                  * Then you need to use the instructions here to configure the environment variables `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET`: <https://ucsb-cs156.github.io/topics/dokku/environment_variables.html>
            - [ ] The main branch is deployed on Dokku at, for example,
                  <https://team02.dokku-xx.cs.ucsb.edu> (substituting your
                  own Dokku instances for xx).
            - [ ] Everyone on the team, and the instructor and TAs, are all able to 
                  login with OAuth and see that they have admin privileges.

            # Details

            See the file  [`docs/dokku.md`](/ucsb-cs156-f24/STARTER-team02/blob/main/docs/dokku.md) in the repo for details.

      - name: Set up Team qa deployment
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Set up Team qa deployment
          labels: "setup"
          body: |
            # Acceptance Criteria:

            - [ ] An app named `team02-qa` is created on this team's dokku server.
            - [ ] An database is configured for that app (see: <https://ucsb-cs156.github.io/topics/dokku/postgres_database.html>)
            - [ ] HTTPS is configured for that app (see: <https://ucsb-cs156.github.io/topics/dokku/enabling_https.html>)
            - [ ] The ADMIN_EMAILS are configured for that app.
                  * You should find the ones you need in a pinned post on your team's Slack channel.
                  * Instructions for configuring the variable are here: <https://ucsb-cs156.github.io/topics/dokku/environment_variables.html>
            - [ ] Google OAuth is configured for that app.
                  * Instructions for configuring OAuth credentials are here: <https://ucsb-cs156.github.io/topics/oauth/oauth_google_setup.html>
                  * Then you need to use the instructions here to configure the environment variables `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET`: <https://ucsb-cs156.github.io/topics/dokku/environment_variables.html>
            - [ ] The main branch is deployed on Dokku at, for example,
                  <https://team02-qa.dokku-xx.cs.ucsb.edu> (substituting your
                  own Dokku instances for xx).
            - [ ] Everyone on the team, and the instructor and TAs, are all able to 
                  login with OAuth and see that they have admin privileges.
                  
           
            # Details

            Set up a separate Dokku instance for QA.  Adapt the instructions from 
            the file [`docs/dokku.md`](/ucsb-cs156-f24/STARTER-team02/blob/main/docs/dokku.md) in the repo.  The QA (quality assurance) instance
            starts with the main branch, but later on, you will be able to deploy
            any branch to this instance. You typically do this when you have a PR
            that is being code reviewed.  You can use the your team's Slack channel
            to coordinate who is deploying what to QA at any given time.


      - name: Adjust links in README.md
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Adjust title and links in README.md
          labels: "setup"
          body: |
            ## Acceptance criteria
            - [ ] The title of the README.md file is changed from `STARTER-team02` to the name of the app (e.g. `team02-f24-6pm-4`)
            - [ ] The README.md file is updated with links to the prod and qa instances on dokku.
            - [ ] The README.md file is updated with any other links as specified in the instructions.
            
            ## Details
            
            See the README.md file in the repo for details.
  
   
      - name: Submit for Grading
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title:  Submit for Grading
          labels: "setup"
          body: |

            This issue should be the very *last* one that the team drags into the "done" column;
            it signifies that the sprint is complete, and that the project is ready for the
            staff to review it for a grade.

            ## Acceptance criteria
  
            - [ ] All PRs have been code reviewed and merged to main
            - [ ] All issues are in the done column 
            - [ ] The `main` branch (after all PRs merged) has been reployed to the dokku instance with the <tt>dokku git:sync team02 <i>url</i> main</tt> and `dokku ps:rebuild team02 ` commands
            - [ ] The assignment has been submitted on Canvas
            
            ## Details
            
            See the assignment description at ${{env.ASN_LINK}} for details.

  createIssues:
    needs: [createOneOffIssues]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        api:
          [
            "UCSBDiningCommonsMenuItem",
            "UCSBOrganization",
            "RecommendationRequest",
            "MenuItemReview",
            "HelpRequest",
            "Articles",
          ]

    steps:
      - uses: actions/checkout@v3
      - name: Delete Label for ${{ matrix.api }}
        continue-on-error: true
        env:
          token: ${{ github.token }}
          name: ${{ matrix.api }}
          color: ${{ fromJSON(env.LABEL_COLOR)[matrix.api] }}
        run: |
          gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{github.repository}}/labels/${{env.name}} 
      - name: Create Label
        env:
          token: ${{ github.token }}
          name: ${{ matrix.api }}
          color: ${{ fromJSON(env.LABEL_COLOR)[matrix.api] }}
        run: |
          gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{github.repository}}/labels \
              -f name='${{env.name}}' \
              -f description='team02 issues for ${{env.name}}' \
              -f color='${{env.color}}' 

      - name: Create personal dokku dev deployment
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
        with:
          token: ${{ github.token }}
          labels: "${{env.name}}"
          title: "${{env.name}} - Create personal dokku dev deployment"
          body: |

            # Dependencies

            None: The team member that takes on ${{env.name}} should start with this issue.

            # Overview

            The team member that takes on ${{env.name}} as their database table
            should use this issue to track creating their personal dokku
            deployment.
            
            # Acceptance Criteria:
            - [ ] An app named `team02-YOURGITHUBID-dev` is created on this team's dokku server, where
                  `YOURGITHUBID` is your github id.

            - [ ] An database is configured for that app (see: <https://ucsb-cs156.github.io/topics/dokku/postgres_database.html>)
            - [ ] HTTPS is configured for that app (see: <https://ucsb-cs156.github.io/topics/dokku/enabling_https.html>)
            - [ ] The ADMIN_EMAILS are configured for that app.
                  * You should find the ones you need in a pinned post on your team's Slack channel.
                  * Instructions for configuring the variable are here: <https://ucsb-cs156.github.io/topics/dokku/environment_variables.html>
            - [ ] Google OAuth is configured for that app.
                  * Instructions for configuring OAuth credentials are here: <https://ucsb-cs156.github.io/topics/oauth/oauth_google_setup.html>
                  * Then you need to use the instructions here to configure the environment variables `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET`: <https://ucsb-cs156.github.io/topics/dokku/environment_variables.html>
            - [ ] Everyone on the team, and the instructor and TAs, are all able to 
                  login with OAuth and see that they have admin privileges.
            - [ ] Initially, the `main` branch is deployed and works properly (later, you will deploy your own branches to this 
                  instance as you test them before merging.)     
            # What to do next

            Next:
            * Drag the issue for "${{env.name}} - Create personal dokku dev deployment" directly into the "Done" column (we don't do code review on setup tasks like this one.)
            * Locate the issue: "Copy files for Backend CRUD API `${{env.name}}` from team02" on the Kanban board.
            * Assign that issue to yourself
            * Drag it into the "In Progress" column.
            * Start a new branch.  The new branch name is something like `xy-${{env.name}}-backend`
              <pre>
              git fetch
              git checkout main
              git pull origin main
              git checkout -b <i>your-branch-name</i>
              </pre>

      - name: Backend CRUD API
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
        with:
          token: ${{ github.token }}
          labels: "${{env.name}}"
          title: Copy files for Backend CRUD API `${{env.name}}` from team02
          body: |

            # Dependencies

            Do the "Create personal dokku dev deployment" issue first.

            # Acceptance Criteria:

            - [ ] Backend API routes for CRUD operations for `${{env.name}}` are
                  available in Swagger (following the criteria from team02)

            # Implementation Details:
            - [ ] Find `${{env.name}}.java` in your team02 project in the directory 
                  `src/main/java/edu/ucsb/cs156/example/entities` 
                  and copy it into your team02 project in the same directory.
            - [ ] Do the same for  `${{env.name}}Repository.java` from the directory
                  `src/main/java/edu/ucsb/cs156/example/repositorires`
            - [ ] Do the same for `${{env.name}}Controller.java` from the directory
                  `src/main/java/edu/ucsb/cs156/example/controllers`
            - [ ] Do the same for `${{env.name}}ControllerTests.java` from the directory
                  `src/test/java/edu/ucsb/cs156/example/controllers`          
            - [ ] With these files in place, visit swagger and make sure 
                  the CRUD operations for `${{env.name}}` are working properly.
            
            # What to do next

            ** Make a PR**: When you've met all of the acceptance criteria, do a PR for this branch,
            being sure to enter a [reasonable title](https://ucsb-cs156.github.io/topics/pull_requests.html#pr-titles)
            and [description](https://ucsb-cs156.github.io/topics/pull_requests.html#pr-descriptions).

            In the description, include the text "Closes #n" where `n` is the number of
            this issue.

            Then ask for a team member to review your PR.

            Finally: drag this issue from "In Progress" to "In Review".
      
            ** Review Others' PRs**: Next, see if there are any PRs that need to be code reviewed and merged.  Unless you are the
            first person on your team to complete a PR, there likely is at least one.
            See: 
            * [General Code Review Advice](https://ucsb-cs156.github.io/topics/code_reviews/)
            * [Performin Code Reviews on Github](https://ucsb-cs156.github.io/topics/code_reviews/code_reviews_github.html)

            ** Start your next issue **: Then, find the issue for "Create fixtures for `${{env.name}}`" on the Kanban board in the ToDo column.
            
            * Assign it to yourself
            * Drag into "In Progress"
            * Create a new branch, starting from the branch for the issue you just finished.
            * Start on the new issue.

      - name: Fixtures
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
          fixtures: ${{ fromJSON(env.FIXTURES)[matrix.api] }}
        with:
          token: ${{ github.token }}
          labels: "${{env.name}}"
          title: Create fixtures for `${{env.name}}`
          body: |

            # Dependencies

            None; this issue should be done first before other issues for the
            ${{env.name}} table

            # Acceptance Criteria:

            - [ ] In the frontend directory `frontend/src/main/fixtures` there is a file called 
                  `${{env.fixtures}}Fixtures.js` that contains Javascript fixtures
                  for the database table that is similar to the `restaurantFixtures.js` 
                  and `ucsbDatesFixtures.js` files in the same directory.
            - [ ] Each example should correspond to the JSON format of an object returned by 
                  the GET API endpoint from team02 for the `${{env.name}}` database table object.

            # What to do next

            ** Make a PR**: When you've met all of the acceptance criteria, do a PR for this branch,
            being sure to enter a [reasonable title](https://ucsb-cs156.github.io/topics/pull_requests.html#pr-titles)
            and [description](https://ucsb-cs156.github.io/topics/pull_requests.html#pr-descriptions).

            In the description, include the text "Closes #n" where `n` is the number of
            this issue.

            Then ask for a team member to review your PR, and drag this issue from "In Progress" to "In Review".
      
            ** Review Others' PRs**: Next, see if there are any PRs that need to be code reviewed and merged.  Unless you are the
            first person on your team to complete a PR, there likely is at least one.
            See: 
            * [General Code Review Advice](https://ucsb-cs156.github.io/topics/code_reviews/)
            * [Performin Code Reviews on Github](https://ucsb-cs156.github.io/topics/code_reviews/code_reviews_github.html)

            ** Start your next issue **: Then, find the issue for "Form Component for `${{env.name}}` plus tests" on the Kanban board in the ToDo column.
            
            * Assign it to yourself
            * Drag into "In Progress"
            * Create a new branch, starting from the branch for the issue you just finished.
            * Start on the new issue.

      - name: Form Component
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
        with:
          token: ${{ github.token }}
          labels: "${{env.name}}"
          title: Form Component for `${{env.name}}` plus tests

          body: |

            # Dependencies

            Complete the following issues first:
            * Create fixtures for ${{env.name}}
            * Set up GitHub Pages (for Storybook)

            # Acceptance Criteria:

            - [ ] A form called `${{env.name}}Form` is visible in the storybook
                  accessible on the Github Pages link.

            - [ ] The form has all the fields that are in the database table 
                  the form fields are labelled with user-friendly names corresponding
                  to the database table column names.

            - [ ] The form has suitable validations for all fields, indicating which fields
                  are required to be non-blank, and any validation that should be performed
                  (e.g. on dates, time values, numeric values with restricted ranges etc.).
                  You can use regular expressions for this, or any of the other validations
                  features of `react-query-form`, using the `register` feature, documented here:
                  <https://www.react-hook-form.com/api/useform/register/>.  Consult
                  both the `RestaurantForm.js` and `UCSBDatesForm.js` files for examples.

            - [ ] If there are date/time fields, use a date/time picker similar
                  to the one in the `UCSBDatesForm` component.  (If this is
                  not applicable to your table, then you can skip this step.)

            - [ ] The `${{env.name}}Form.stories.js` file should have at least one story 
                  for a create scenario, and another for an update scenario.
                  
            - [ ] The PR description where the code addressing this issue is submitted contains
                  a screenshot of the new form (since this is a frontend change).

            - [ ] The PR description where the code addressing this issue is submitted contains
                  a link to the published storybook for the PR.

            # Implementation Details:

            - [ ] Under `frontend/src/main/components/${{env.name}}/` there is a file
                  called `${{env.name}}Form` modelled after 
                  the files `RestaurantForm.js` and/or `UCSBDatesForm.js`

            - [ ] Change the form fields so that they correspond to 
                  the form fields of your database record.  If there are 
                  are labelled with user-friendly names corresponding
                  to the database table column names.

            - [ ] Add suitable validations for all of your fields indicating which fields
                  are required to be non-blank, and any validation that should be performed
                  (e.g. on dates, time values, numeric values with restricted ranges etc.).
                  You can use regular expressions for this, or any of the other validations
                  features of `react-query-form`, using the `register` feature, documented here:
                  <https://www.react-hook-form.com/api/useform/register/>. 
                  Consult both the `Restaurant` and `UCSBDates` examples for guidance.

            - [ ] The form should take a prop called `initialContents` which is either 
                  undefined, or an object that has the same fields as the database table.
                  When passed, it indicates that the form is being used to edit an existing
                  object.  The `id` field should be displayed as a read-only field,
                  and the other fields are pre-populated with the values from the object.

            - [ ] When the `initialContents` is undefined, it indicates that the form is
                  being used to create a new object.  Therefore, if the id field is autogenerated,
                  it should not be displayed on the form, and other form values should 
                  be either empty, or populated with default or example values (as appropriate).
                  
            - [ ] The form should take prop called `submitAction` which is passed to the
                  `handleSubmit` function returned by `useForm`, as in the examples
                  `RestaurantForm.js` and `UCSBDatesForm.js`

            - [ ] The form should take a prop called `buttonLabel` with a default value
                  of `Create`.  The value of this prop is used as the label for the button
                  as shown in  `RestaurantForm.js` and `UCSBDatesForm.js`.            

            - [ ] Under `frontend/src/test/components/${{env.name}}/` create a file called `${{env.name}}Form.test.js` modelled after the files `RestaurantForm.test.js` and `UCSBDatesForm.test.js`.

            - [ ] Under `frontend/src/stories/components/${{env.name}}/` create a file called `${{env.name}}Form.stories.js` modelled after the files `RestaurantForm.stories.js` and `UCSBDatesForm.stories.js`.
                  
            # Notes

            * For *this* issue, it is not necessary that the form be linked to a
              page that connects it to the backend; that will be done in a later issue.

            * This issue illustrates how it is possible to create at least part of the frontend
              for a feature even if/when the backend is not yet complete.

            * It also illustrates how we can create a component that can be reused, in this
              case for both creating and editing a database record.
            
            Reminders (all from `frontend` directory):
            * To run storybook locally: `npm run storybook`.
            * To run tests locally: `npm test`.
            * Quickly test coverage locally: `npm run coverage`
            * Check linting locally: `npx eslint --fix .`
            * Check mutation coverage locally (slow): `npx stryker run`
            * Check mutation coverage of single file (faster): `npx stryker run -m src/main/components/${{env.name}}/${{env.name}}Form.js`
 
            # What to do next

            Do a PR, following all of the usual steps (title, description, `Closes #n` text,
            dragging issue to "In Review", requesting reviewers).

            Check to see if any fellow team members PRs need to be reviewed.
            
            Then, assign yourself the issue "Table Component for `${{env.name}}` plus tests"
            following all the usual steps (assign to self, drag to "In Progress", start new branch.)


      - name: Table Component
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
        with:
          token: ${{ github.token }}
          labels: "${{env.name}}"
          title: Table Component for `${{env.name}}` plus tests

          body: |

            # Dependencies

            Complete the following issues first:
            * Create fixtures for ${{env.name}}
            * Set up GitHub Pages (for Storybook)

            # Acceptance Criteria:

            - [ ] A table called `${{env.name}}Table` is visible in the storybook
                  accessible on the Github Pages link.
                  
            - [ ] The table has all the fields that are in the database table 
                  labelled with user-friendly names corresponding to the database table column names.

            - [ ] The PR description where the code addressing this issue is submitted contains
                  a screenshot of the new table (since this is a frontend change).

            - [ ] The PR description where the code addressing this issue is submitted contains
                  a link to the published storybook for the PR, linking directly to the story 
                  for the new `${{env.name}}Table` component.

            # Implementation Details

            - [ ] Under `frontend/src/main/components/${{env.name}}/` create a file called `${{env.name}}Table`,
                  modelled after the files `RestaurantTable.js` and `UCSBDatesTable.js`

            - [ ] Under `frontend/src/test/components/${{env.name}}/` create a file called `${{env.name}}Table.test.js` 
                  modelled after the files `RestaurantTable.test.js and `UCSBDatesTable.test.js`.

            - [ ] Under `frontend/src/stories/components/${{env.name}}/` create a file called `${{env.name}}Table.stories.js`,
                  modelled after the files `RestaurantTable.stories.js` and `UCSBDatesTable.stories.js`.
                    
            # Notes

            * For *this* issue, tt is not necessary that the table be linked to a
              page that connects it to the backend; that will be done in a later issue.

            * This issue illustrates how it is possible to create at least part of the frontend
              for a feature even if/when the backend is not yet complete.

            # Reminders (all from `frontend` directory):

            * To run storybook locally: `npm run storybook`.
            * To run tests locally: `npm test`.
            * Quickly test coverage locally: `npm run coverage`
            * Check linting locally: `npx eslint --fix .`
            * Check mutation coverage locally (slow): `npx stryker run`
            * Check mutation coverage of single file (faster): `npx stryker run -m src/main/components/${{env.name}}/${{env.name}}Form.js`

            # What to do next

            Do a PR, following all of the usual steps (title, description, `Closes #n` text,
            dragging issue to "In Review", requesting reviewers).

            Check to see if any fellow team members PRs need to be reviewed.
            
            Then, assign yourself the issue "Copy Placeholders for `${{env.name}}` pages; add to App.js/AppNavbar.js"

            Follow all the usual steps (assign to self, drag to "In Progress", start new branch.)


      - name: Copy Placeholder pages; add to App.js/AppNavbar.js
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
          frontend_url: ${{ fromJSON(env.FRONTEND_URL)[matrix.api] }}
        with:
          token: ${{ github.token }}
          labels: "${{env.name}}"
          title: Copy Placeholders for `${{env.name}}` pages; add to App.js/AppNavbar.js
          body: |

            # Dependencies

            None: can be done in parallel with other issues

            # Discussion

            In this issue, you'll set up placeholders for the three pages you are adding to the app.  
            
            These placeholder components are temporary, but they are necessary so that you can 
            add routes to the pages in `frontend/src/App.js` and add a link to the `/${{env.frontend_url}}` 
            name in to the Navigation Bar of the app in `frontend/src/components/AppNavbar.js`.

            Note that the contents of the placeholder pages and tests are temporary, 
            and will be replaced in a later issue.  However, the changes you make in `App.js`
            and `AppNavbar.js` will be permanent.

            The reason for the placeholder code is that we can't really test the
            changes to `App.js` and `AppNavbar.js` until at least some placeholder 
            component for the pages exists, and we can't really test the new pages unless they 
            are routed to in the app.  The placeholder solves this ["chicken/egg" problem](https://en.wikipedia.org/wiki/Chicken_or_the_egg).
            
            # Acceptance Criteria
            
            - [ ] On the main navigation bar, there is a link to `${{env.name}}`
                  that takes the user to the `${{env.name}}IndexPage` page (a placeholder for now) 
                  at the url `/${{env.frontend_url}}`.
            - [ ] The `${{env.name}}IndexPage` page has a link to the `${{env.name}}CreatePage` page 
                  at the url `/${{env.frontend_url}}/create`.
            - [ ] The `${{env.name}}IndexPage` page has a link to the `${{env.name}}EditPage` page 
                  at the url `/${{env.frontend_url}}/edit/1`.

            # Implementation Steps    
             
            - [ ] Under `frontend/src/main/pages/${{env.name}}/` create three files
                  called `${{env.name}}CreatePage.js`, `${{env.name}}EditPage.js`, `${{env.name}}IndexPage.js`, modelled after 
                  `PlaceholderCreatePage.js`, `PlaceholderEditPage.js`, `PlaceholderIndexPage.js`.
                  The only change that should be needed is the name of the component
                  (see "Notes" below)
                  
            - [ ] Under `frontend/src/tests/pages/${{env.name}}/` create three files called `${{env.name}}CreatePage.test.js`, `${{env.name}}EditPage.test.js`, `${{env.name}}IndexPage.test.js`  modelled after `PlaceholderCreatePage.test.js`, `PlaceholderEditPage.test.js`, `PlaceholderIndexPage.test.js`. The only change that should be needed is the name of the component 
                  being imported.

            - [ ] In `frontend/src/App.js`, there is a section of code that establishes the routes to the pages for the `${{env.name}}` components that looks similar to the ones for `Restaurants`, `UCSBDates`, and the `Placeholder`.  Copy/paste this code, changing, `Restaurant` to  `${{env.name}}`, and `/restaurants` to `/${{env.frontend_url}}` 
                  
            - [ ] In `frontend/src/main/components/Nav/AppNavbar.js`,add a section of code that establishes the navbar link for `${{env.name}}`.  It should look similar to this code that establishes the link for `Restaurants`. Copy/paste this code, changing `/restaurants` to  `/${{env.frontend_url}}`, and `Restaurants` to `${{env.name}}`
                 
            - [ ] Fire up the app on localhost and make sure that you can navigate to the pages for ${{env.name}}.  You should see pages similar to the ones at the `Placeholder` link on the navbar.

            # Notes

            The changes you will need to make from the examples are minimal.

            In the three page components, typically you will only need to change the 
            name of the default export, changing `Placeholder` to `${{env.name}}`

            
            ```js
            export default function PlaceholderCreatePage() {
            ```

            In `App.js`, you will need to:
            * Add import statements for the three page components
            * Copy/paste the section of code below, changing `/restaurants`  to `/${{env.frontend_url}}` and `Restaurant` to `${{env.name}}`
                                 
            ```js
            {
                  hasRole(currentUser, "ROLE_USER") && (
                    <>
                      <Route exact path="/restaurants" element={<RestaurantIndexPage />} />
                    </>
                  )
            }
            {
                  hasRole(currentUser, "ROLE_ADMIN") && (
                    <>
                      <Route exact path="/restaurants/edit/:id" element={<RestaurantEditPage />} />
                      <Route exact path="/restaurants/create" element={<RestaurantCreatePage />} />
                    </>
                  )
            }
            ```

            In `AppNavbar.js`, copy/paste this section of code, and change  `/restaurants` to `/${{env.frontend_url}}` and `Restaurants` to `${{env.name}}`:

            ```js
            {
                  hasRole(currentUser, "ROLE_USER") && (
                    <>
                      <Nav.Link as={NavLink} to="/restaurants">Restaurants</Nav.Link>
                    </>
                  )
            }
            ```
            # Reminders (all from `frontend` directory):
                  
            * To run storybook locally: `npm run storybook`.
            * To run tests locally: `npm test`.
            * Quickly test coverage locally: `npm run coverage`
            * Check linting locally: `npx eslint --fix .`
            * Check mutation coverage locally (slow): `npx stryker run`
            * Check mutation coverage of single file (faster): `npx stryker run -m src/main/components/Nav/AppNavbar.js`
            
            # What to do next

            * Do a PR (following the usual steps).
            * Check for other PRs 
            * Start work on "Create Page for `${{env.name}}` plus tests and stories" (following the usual steps for a new issue)


      - name: Create Page
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
          frontend_url: ${{ fromJSON(env.FRONTEND_URL)[matrix.api] }}

        with:
          token: ${{ github.token }}
          labels: "${{env.name}}"
          title: Create Page for `${{env.name}}` plus tests and stories

          body: |
            # Dependencies

            Complete the following issues first:
            * Create fixtures for ${{env.name}}
            * Form Component for ${{env.name}}
            * Copy Placeholders for `${{env.name}}` pages; add to App.js/AppNavbar.js

            # Acceptance Criteria:

            - [ ] When you navigate to `/${{env.frontend_url}}/create` in the URL bar, 
                  there is page that allows the user to create a new ${{env.name}} record.

            - [ ] When you enter data into the form and click the submit button,
                  if the data is valid, the data is sent to the server, 
                  a new ${{env.name}} record is created,and the user is routed to the 
                  `/${{env.frontend_url}}` route for the `${{env.name}}IndexPage` page.

            - [ ] When you enter data into the form and click the submit button,
                  if the data is not valid,appropriate error messages are displayed, 
                  the data is NOT sent to the server, a new ${{env.name}} record is NOT created,
                  and the user remains on the `${{env.frontend_url}}/create` page.

            - [ ] When you submit valid data to the page and click submit, a new valid database
                  entry is stored in the database.  (You can verify this by using the swagger
                  endpoint to view the current data in the table.)

            - [ ] The PR description has step-by-step descriptions for testing the new page, along
                  with screenshots, so that someone reviewing the PR will know what to do to test
                  it, and what it is supposed to look like when it functions correctly.

            - [ ] The PR description has a link to the storybook entry for the new page.

            # Implementation Details

            - [ ] Before starting, refamiliarize yourself with the backend CRUD API endpoints for 
                  `${{env.name}}` by looking at the swagger page.  You are going to be copy/pasting
                  code from the `Restaurant` and `UCSBDates` components. Those use backend api endpoints
                  that are similar to the ones for `${{env.name}}`, but not identical.  You will need
                  to know the exact name of the API endpoints for `${{env.name}}` in order to
                  be sure that your frontend code is calling the correct backend endpoints.

            - [ ] In `${{env.name}}CreatePage.js`, replace the code from `PlaceholderCreatePage.js` 
                  with code modelled after the files `RestaurantCreatePage.js` and/or `UCSBDatesCreatePage.js`
                  that is appropriate to your `${{env.name}}` table. Be sure to get the API endpoint names correct for your `${{env.name}}` table.

            - [ ] In `${{env.name}}CreatePage.test.js`, replace the code from `PlaceholderCreatePage.test.js` 
                  with code modelled after  the files `RestaurantCreatePage.test.js` and/or `UCSBDatesCreatePage.test.js`
                  appropriate to your `${{env.name}}` table.  Be sure to get the API endpoint names correct for your `${{env.name}}` table.

            - [ ] Under `frontend/src/stories/pages/${{env.name}}/` create a file called `${{env.name}}CreatePage.stories.js` 
                  modelled after the files `RestaurantCreatePage.stories.js` and/or `UCSBDatesCreatePage.stories.js`.

            # Reminders (all from `frontend` directory):
                  
            * To run storybook locally: `npm run storybook`.
            * To run tests locally: `npm test`.
            * Quickly test coverage locally: `npm run coverage`
            * Check linting locally: `npx eslint --fix .`
            * Check mutation coverage locally (slow): `npx stryker run`
            * Check mutation coverage of single file (faster): `npx stryker run -m src/main/pages/${{env.name}}/${{env.name}}CreatePage.js`

            # What to do next

            * Do a PR (following the usual steps).
            * Check for other PRs 
            * Start work on "Index Page for `${{env.name}}` plus tests and stories"(following the usual steps for a new issue)
            
      - name: Index Page
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
          frontend_url: ${{ fromJSON(env.FRONTEND_URL)[matrix.api] }}
        with:
          token: ${{ github.token }}
          labels: "${{env.name}}"
          title: Index Page for `${{env.name}}` plus tests and stories

          body: |

            # Dependencies

            Complete the following issues first:
            * Create fixtures for ${{env.name}}
            * Table Component for ${{env.name}} 
            * Copy Placeholders for `${{env.name}}` pages; add to App.js/AppNavbar.js

            # Acceptance Criteria:

            - [ ] When the user navigates to `/${{env.frontend_url}}` the page will be populated
                  with data all rows in the database, and the user will be able to see
                  all of the data in the table.

            - [ ] When the index page is accessed by an admin user, they will be able to
                  see a button to create a new record, and a button to edit each record,
                  and a button to delete each record.

            - [ ] When the index page is accessed by an regular logged in user, 
                  the buttons to create a new record, edit a record, and delete a record
                  will not be visible in the table.  Logged in users will be able to see
                  the data in the table, but that is all.

            - [ ] When the index page is accessed by an admin user, the edit button will
                  navigate to the URL for the edit page for that record.  (The page should display
                  if the issue to implement it is already completed, or a blank page with the correct
                  URL if it is not.)

            - [ ] When the index page is accessed by an admin user, the delete button will
                  call the endpoint to delete the record from the database, and then refresh
                  the page.  The refreshed page will not show the deleted record.

            - [ ] The PR description where the code addressing this issue is submitted contains
                  a screenshot of the new page (since this is a frontend change).

            - [ ] The PR description where the code addressing this issue is submitted contains
                  a link to the published storybook for the PR, linking directly to the story 
                  for the new `${{env.name}}IndexPage` component.

            # Implementation Details

            - [ ] Before starting, refamiliarize yourself with the backend CRUD API endpoints for 
                  `${{env.name}}` by looking at the swagger page.  You are going to be copy/pasting
                  code from the `Restaurant` and `UCSBDates` components. Those use backend api endpoints
                  that are similar to the ones for `${{env.name}}`, but not identical.  You will need
                  to know the exact name of the API endpoints for `${{env.name}}` in order to
                  be sure that your frontend code is calling the correct backend endpoints.

            - [ ] Modify the `${{env.name}}IndexPage`, replacing the placeholder
                  content with content modelled after the files `RestaurantIndexPage.js`
                  and/or `UCSBDatesIndexPage.js`.  Be sure to get the API endpoint names correct for your `${{env.name}}` table.

            - [ ] Modify `${{env.name}}IndexPage.test.js`  replacing the placeholder
                  content with content modelled after the files `RestaurantIndexPage.test.js`
                  and/or `UCSBDatesIndexPage.test.js`. Be sure to get the API endpoint names correct for your `${{env.name}}` table.

            - [ ] Under `frontend/src/stories/pages/${{env.name}}/` create a file
                  called `${{env.name}}IndexPage.stories.js` modelled after 
                  the files `RestaurantIndexPage.stories.js` and `UCSBDatesIndexPage.stories.js`.

            # Reminders (all from `frontend` directory):
                  
            * To run storybook locally: `npm run storybook`.
            * To run tests locally: `npm test`.
            * Quickly test coverage locally: `npm run coverage`
            * Check linting locally: `npx eslint --fix .`
            * Check mutation coverage locally (slow): `npx stryker run`
            * Check mutation coverage of single file (faster): `npx stryker run -m src/main/pages/${{env.name}}/${{env.name}}IndexPage.js`

            # What to do next

            * Do a PR (following the usual steps).
            * Check for other PRs 
            * Start work on "Edit Page for `${{env.name}}` plus tests and stories" (following the usual steps for a new issue)
                         
      - name: Edit Page
        uses: dacbd/create-issue-action@main
        env:
          name: ${{ matrix.api }}
          frontend_url: ${{ fromJSON(env.FRONTEND_URL)[matrix.api] }}
          
        with:
          token: ${{ github.token }}
          labels: "${{env.name}}"
          title: Edit Page for `${{env.name}}` plus tests and stories
          body: |
      
            # Dependencies

            Complete the following issues first:
            * Create fixtures for ${{env.name}}
            * Form Component for ${{env.name}}  
            * Copy Placeholders for `${{env.name}}` pages; add to App.js/AppNavbar.js

            # Acceptance Criteria:

            - [ ] When the user navigates to `/${{env.frontend_url}}/edit/:id` where `:id` 
                  is the `id` field of a valid record in the table, the page will be populated
                  with data from that row of the database, and will be able to edit fields
                  from that database record.

            - [ ] Valid changes made on the page are saved to the database when the user clicks
                  the submit button.
            - [ ] Changes made on the page are NOT saved when the page contains invalid data; instead,
                  appropriate error messages are shown.
            - [ ] Changes made on the page are NOT saved when the user clicks the cancel button,
                  and the user is routed back to the previous page they were on (like the "back button").     

            - [ ] The PR description where the code addressing this issue is submitted contains
                  a screenshot of the new page (since this is a frontend change).

            - [ ] The PR description where the code addressing this issue is submitted contains
                  a link to the published storybook for the PR, linking directly to the story 
                  for the new `${{env.name}}EditPage` component.

            # Implementation Details

            - [ ] Before starting, refamiliarize yourself with the backend CRUD API endpoints for 
                  `${{env.name}}` by looking at the swagger page.  You are going to be copy/pasting
                  code from the `Restaurant` and `UCSBDates` components. Those use backend api endpoints
                  that are similar to the ones for `${{env.name}}`, but not identical.  You will need
                  to know the exact name of the API endpoints for `${{env.name}}` in order to
                  be sure that your frontend code is calling the correct backend endpoints.

            - [ ] Replace the placeholder content in `${{env.name}}EditPage.js`
                  with appropriate content from `RestaurantEditPage.js` and/or
                  `UCSBDatesEditPage.js`. Be sure to get the API endpoint names correct for your `${{env.name}}` table.
            
            - [ ] Replace the placeholder content in `${{env.name}}EditPage.test.js`
                  with appropriate content from `RestaurantEditPage.test.js` and/or
                  `UCSBDatesEditPage.test.js`. Be sure to get the API endpoint names correct for your `${{env.name}}` table.

            - [ ] Under `frontend/src/stories/pages/${{env.name}}/` create a file
                  called `${{env.name}}EditPage.stories.js` modelled after 
                  the files `RestaurantEditPage.stories.js` and/or `UCSBDatesEditPage.stories.js`.
            
            # Reminders (all from `frontend` directory):
                  
            * To run storybook locally: `npm run storybook`.
            * To run tests locally: `npm test`.
            * Quickly test coverage locally: `npm run coverage`
            * Check linting locally: `npx eslint --fix .`
            * Check mutation coverage locally (slow): `npx stryker run`
            * Check mutation coverage of single file (faster): `npx stryker run -m src/main/pages/${{env.name}}/${{env.name}}EditPage.js`

            # What to do next

            When you are done with this issue, you are finished with the frontend CRUD
            operations for `${{env.name}}`.  Now, please give your full attention to 
            helping others on your team to complete the sprint, so that the team
            is ready to submit on Canvas by the deadline.
            
